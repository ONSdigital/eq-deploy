resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

resources:
- name: eq-survey-runner
  type: git
  source:
    uri: https://github.com/ONSdigital/eq-survey-runner.git
    branch: master

- name: eq-terraform
  type: git
  source:
    uri: https://github.com/ONSdigital/eq-terraform.git
    branch: master

- name: eq-terraform-ecs
  type: git
  source:
    uri: https://github.com/ONSdigital/eq-terraform-ecs.git
    branch: master

- name: eq-ecs-deploy
  type: git
  source:
    uri: https://github.com/ONSdigital/eq-ecs-deploy.git
    branch: master

- name: eq-survey-launcher-deploy
  type: git
  source:
    uri: https://github.com/ONSdigital/eq-survey-launcher-deploy.git
    branch: master

- name: eq-survey-runner-deploy
  type: git
  source:
    uri: https://github.com/ONSdigital/eq-survey-runner-deploy.git
    branch: master

- name: eq-author-deploy
  type: git
  source:
    uri: https://github.com/ONSdigital/eq-author-deploy.git
    branch: master

- name: eq-author
  type: git
  source:
    uri: https://github.com/ONSdigital/eq-author.git
    branch: master

- name: eq-author-api
  type: git
  source:
    uri: https://github.com/ONSdigital/eq-author-api.git
    branch: master

- name: eq-publisher
  type: git
  source:
    uri: https://github.com/ONSdigital/eq-publisher.git
    branch: master

- name: go-launch-a-survey
  type: git
  source:
    uri: https://github.com/ONSdigital/go-launch-a-survey.git
    branch: master

- name: eq-survey-register
  type: git
  source:
    uri: https://github.com/ONSdigital/eq-survey-register.git
    branch: master

- name: eq-schema-validator
  type: git
  source:
    uri: https://github.com/ONSdigital/eq-schema-validator.git
    branch: master

- name: eq-smoke-tests
  type: git
  source:
    uri: https://github.com/ONSdigital/eq-smoke-tests.git
    branch: master

- name: survey-runner-image
  type: docker-image
  source:
    repository: ((docker_registry))/eq-survey-runner
    aws_access_key_id: ((dev_aws_access_key))
    aws_secret_access_key: ((dev_aws_secret_key))

- name: survey-runner-static-image
  type: docker-image
  source:
    repository: ((docker_registry))/eq-survey-runner-static
    aws_access_key_id: ((dev_aws_access_key))
    aws_secret_access_key: ((dev_aws_secret_key))

- name: eq-author-image
  type: docker-image
  source:
    repository: ((docker_registry))/eq-author
    aws_access_key_id: ((dev_aws_access_key))
    aws_secret_access_key: ((dev_aws_secret_key))

- name: eq-author-api-image
  type: docker-image
  source:
    repository: ((docker_registry))/eq-author-api
    aws_access_key_id: ((dev_aws_access_key))
    aws_secret_access_key: ((dev_aws_secret_key))

- name: eq-publisher-image
  type: docker-image
  source:
    repository: ((docker_registry))/eq-publisher
    aws_access_key_id: ((dev_aws_access_key))
    aws_secret_access_key: ((dev_aws_secret_key))

- name: go-launch-a-survey-image
  type: docker-image
  source:
    repository: ((docker_registry))/go-launch-a-survey
    aws_access_key_id: ((dev_aws_access_key))
    aws_secret_access_key: ((dev_aws_secret_key))

- name: eq-survey-register-image
  type: docker-image
  source:
    repository: ((docker_registry))/eq-survey-register
    aws_access_key_id: ((dev_aws_access_key))
    aws_secret_access_key: ((dev_aws_secret_key))

- name: eq-schema-validator-image
  type: docker-image
  source:
    repository: ((docker_registry))/eq-schema-validator
    aws_access_key_id: ((dev_aws_access_key))
    aws_secret_access_key: ((dev_aws_secret_key))

- name: slack-alert
  type: slack-notification
  source:
    url: {{slack_webhook_url}}

jobs:
- name: build-eq-survey-runner
  plan:
  - get: eq-survey-runner
    trigger: true
  - task: Run Tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-python-build
      inputs:
      - name: eq-survey-runner
      outputs:
      - name: compiled-eq-survey-runner
      run:
        path: sh
        args:
        - -exc
        - |
          cd eq-survey-runner
          pipenv install --dev
          pipenv run ./scripts/build.sh

          cp -R ../eq-survey-runner/* ../compiled-eq-survey-runner
          cp ../eq-survey-runner/.git/HEAD ../compiled-eq-survey-runner/.application-version
  - put: survey-runner-image
    params:
      build: compiled-eq-survey-runner
      tag: eq-survey-runner/.git/HEAD
    get_params:
      skip_download: true
  - put: survey-runner-static-image
    params:
      build: compiled-eq-survey-runner
      dockerfile: compiled-eq-survey-runner/Dockerfile.static
      tag: eq-survey-runner/.git/HEAD
    get_params:
      skip_download: true

- name: build-eq-author
  plan:
  - get: eq-author
    trigger: true
  - task: Run Tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-author-build
      inputs:
      - name: eq-author
      outputs:
      - name: build_args
      run:
        path: sh
        args:
        - -exc
        - |
          cd eq-author
          yarn install

          eq_author_tag=$(cat ../eq-author/.git/HEAD | xargs echo -n)
          echo "{\"APPLICATION_VERSION\":\""$eq_author_tag"\"}" > ../build_args/args
  - put: eq-author-image
    params:
      build: eq-author
      tag: eq-author/.git/HEAD
      build_args_file: build_args/args
    get_params:
      skip_download: true

- name: build-eq-author-api
  plan:
  - get: eq-author-api
    trigger: true
  - task: Run Tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-author-build
      inputs:
      - name: eq-author-api
      outputs:
      - name: build_args
      run:
        path: sh
        args:
        - -exc
        - |
          cd eq-author-api
          yarn install

          eq_author_api_tag=$(cat ../eq-author-api/.git/HEAD | xargs echo -n)
          echo "{\"APPLICATION_VERSION\":\""$eq_author_api_tag"\"}" > ../build_args/args
  - put: eq-author-api-image
    params:
      build: eq-author-api
      tag: eq-author-api/.git/HEAD
      build_args_file: build_args/args
    get_params:
      skip_download: true

- name: build-eq-publisher
  plan:
  - get: eq-publisher
    trigger: true
  - task: Run Tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-author-build
      inputs:
      - name: eq-publisher
      outputs:
      - name: build_args
      run:
        path: sh
        args:
        - -exc
        - |
          cd eq-publisher
          yarn install

          eq_publisher_tag=$(cat ../eq-publisher/.git/HEAD | xargs echo -n)
          echo "{\"APPLICATION_VERSION\":\""$eq_publisher_tag"\"}" > ../build_args/args
  - put: eq-publisher-image
    params:
      build: eq-publisher
      tag: eq-publisher/.git/HEAD
      build_args_file: build_args/args
    get_params:
      skip_download: true

- name: build-go-launch-a-survey
  plan:
  - get: go-launch-a-survey
    trigger: true
  - task: Build
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-golang-build
      inputs:
      - name: go-launch-a-survey
      outputs:
      - name: go-launch-a-survey-compiled
      run:
        path: bash
        args:
        - -exc
        - |
          service docker start

          build_dir=$(pwd)
          export GOPATH=$HOME/gopath
          export PATH=$HOME/gopath/bin:$PATH
          mkdir -p $HOME/gopath/src/github.com/ONSdigital/go-launch-a-survey
          cp -R go-launch-a-survey/ $HOME/gopath/src/github.com/ONSdigital/
          cd $HOME/gopath/src/github.com/ONSdigital/go-launch-a-survey

          go get -u github.com/golang/dep/cmd/dep
          dep ensure
          docker run --rm -v $(pwd):/src centurylink/golang-builder

          service docker stop

          cp -R . $build_dir/go-launch-a-survey-compiled
  - put: go-launch-a-survey-image
    params:
      build: go-launch-a-survey-compiled
      tag: go-launch-a-survey/.git/HEAD
    get_params:
      skip_download: true

- name: build-eq-survey-register
  plan:
  - get: eq-survey-register
    trigger: true
  - task: Build
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-golang-build
      inputs:
      - name: eq-survey-register
      outputs:
      - name: eq-survey-register-compiled
      run:
        path: bash
        args:
        - -exc
        - |
          service docker start

          build_dir=$(pwd)
          export GOPATH=$HOME/gopath
          export PATH=$HOME/gopath/bin:$PATH
          mkdir -p $HOME/gopath/src/github.com/ONSdigital/eq-survey-register
          cp -R eq-survey-register/ $HOME/gopath/src/github.com/ONSdigital/
          cd $HOME/gopath/src/github.com/ONSdigital/eq-survey-register

          go get -u github.com/golang/dep/cmd/dep
          dep ensure
          docker run --rm -v $(pwd):/src jonnyshaw89/golang-builder

          service docker stop

          cp -R . $build_dir/eq-survey-register-compiled
  - put: eq-survey-register-image
    params:
      build: eq-survey-register-compiled
      tag: eq-survey-register/.git/HEAD
    get_params:
      skip_download: true

- name: build-eq-schema-validator
  plan:
  - get: eq-schema-validator
    trigger: true
  - task: Run Tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-python-build
      inputs:
      - name: eq-schema-validator
      outputs:
      - name: compiled-eq-schema-validator
      run:
        path: sh
        args:
        - -exc
        - |
          pyenv install 3.6.3

          cd eq-schema-validator
          pip install -U pip pipenv
          pipenv install --dev --deploy
          pipenv run ./scripts/build.sh

          cp -R ../eq-schema-validator/* ../compiled-eq-schema-validator
          cp ../eq-schema-validator/.git/HEAD ../compiled-eq-schema-validator/.application-version
  - put: eq-schema-validator-image
    params:
      build: compiled-eq-schema-validator
      tag: eq-schema-validator/.git/HEAD
    get_params:
      skip_download: true

- name: staging-deploy
  serial_groups: [staging-deploy, staging-smoke-tests, staging-destroy]
  plan:
  - get: eq-survey-runner
    passed: [build-eq-survey-runner]
    trigger: true
  - get: eq-author
    passed: [build-eq-author]
    trigger: true
  - get: eq-author-api
    passed: [build-eq-author-api]
    trigger: true
  - get: eq-publisher
    passed: [build-eq-publisher]
    trigger: true
  - get: go-launch-a-survey
    passed: [build-go-launch-a-survey]
    trigger: true
  - get: eq-survey-register
    passed: [build-eq-survey-register]
    trigger: true
  - get: eq-schema-validator
    passed: [build-eq-schema-validator]
    trigger: true
  - get: eq-terraform
    trigger: true
  - get: eq-terraform-ecs
    trigger: true
  - get: eq-ecs-deploy
    trigger: true
  - get: eq-survey-launcher-deploy
    trigger: true
  - get: eq-survey-runner-deploy
    trigger: true
  - get: eq-author-deploy
    trigger: true
  - task: Deploy Terraform
    params:
      AWS_ACCESS_KEY_ID: ((dev_aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((dev_aws_secret_key))
      ANSIBLE_HOST_KEY_CHECKING: False
      TF_VAR_env: 'staging'
      TF_VAR_aws_access_key: '((dev_aws_access_key))'
      TF_VAR_aws_secret_key: '((dev_aws_secret_key))'
      TF_VAR_aws_key_pair: staging
      TF_VAR_ons_access_ips: {{ons_access_ips}}
      TF_VAR_certificate_arn: {{certificate_arn}}
      TF_VAR_slack_webhook_path: {{slack_webhook_path}}
      TF_VAR_survey_runner_docker_registry: {{docker_registry}}
      TF_VAR_survey_launcher_registry: {{docker_registry}}
      TF_VAR_schema_validator_registry: {{docker_registry}}
      TF_VAR_author_registry: {{docker_registry}}
      TF_VAR_auto_deploy_updated_tags: false
      TF_VAR_ecs_cluster_min_size: 3
      TF_VAR_survey_runner_min_tasks: 3
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-terraform-build
      inputs:
      - name: eq-terraform
      - name: eq-survey-runner
      - name: eq-author
      - name: eq-author-api
      - name: eq-publisher
      - name: go-launch-a-survey
      - name: eq-schema-validator
      run:
        path: bash
        args:
        - -exc
        - |
          echo "Deploy Staging"
          cd eq-terraform
          echo -e {{pem}} > staging.pem
          chmod 400 staging.pem
          ansible-galaxy install -f -r survey-runner-queue/ansible-requirements.yml

          survey_runner_tag=$(cat ../eq-survey-runner/.git/HEAD | xargs echo -n)
          eq_author_tag=$(cat ../eq-author/.git/HEAD | xargs echo -n)
          eq_author_api_tag=$(cat ../eq-author-api/.git/HEAD | xargs echo -n)
          eq_publisher_tag=$(cat ../eq-publisher/.git/HEAD | xargs echo -n)
          go_launch_a_survey_tag=$(cat ../go-launch-a-survey/.git/HEAD | xargs echo -n)
          eq_schema_validator_tag=$(cat ../eq-schema-validator/.git/HEAD | xargs echo -n)

          terraform init -backend-config="key="staging""
          echo "eu-west-1" | terraform apply \
            -var survey_runner_tag=$survey_runner_tag \
            -var survey_launcher_tag=$go_launch_a_survey_tag \
            -var author_tag=$eq_author_tag \
            -var author_api_tag=$eq_author_api_tag \
            -var publisher_tag=$eq_publisher_tag \
            -var survey_launcher_tag=$go_launch_a_survey_tag \
            -var schema_validator_tag=$eq_schema_validator_tag
    on_failure:
      put: slack-alert
      params:
        channel: '#eq-runner #eq-author'
        attachments:
          - pretext: Staging Deploy Failed
            color: danger
            title: Concourse Build $BUILD_ID
            title_link: http://concourse.dev.eq.ons.digital/builds/$BUILD_ID

  - task: Wait for Deployed Survey Runner
    timeout: 10m
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-terraform-build
      inputs:
      - name: eq-survey-runner
      run:
        path: bash
        args:
        - -exc
        - |
          survey_runner_tag=$(cat eq-survey-runner/.git/HEAD | xargs echo -n)
          while [[ "$(curl -s https://staging-new-surveys.dev.eq.ons.digital/status)" != *"$survey_runner_tag"* ]]; do sleep 5; done
    on_failure:
      put: slack-alert
      params:
        channel: '#eq-runner'
        attachments:
          - pretext: Staging Survey Runner Deploy Failed
            color: danger
            title: Concourse Build $BUILD_ID
            title_link: http://concourse.dev.eq.ons.digital/builds/$BUILD_ID
  - task: Wait for Deployed Author API
    timeout: 10m
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-terraform-build
      inputs:
      - name: eq-author-api
      run:
        path: bash
        args:
        - -exc
        - |
          author_api_tag=$(cat eq-author-api/.git/HEAD | xargs echo -n)
          while [[ "$(curl -s https://staging-author-api.dev.eq.ons.digital/status)" != *"$author_api_tag"* ]]; do sleep 5; done
    on_failure:
      put: slack-alert
      params:
        channel: '#eq-author'
        attachments:
          - pretext: Staging Author API Deploy Failed
            color: danger
            title: Concourse Build $BUILD_ID
            title_link: http://concourse.dev.eq.ons.digital/builds/$BUILD_ID
  - task: Wait for Deployed Author
    timeout: 10m
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-terraform-build
      inputs:
      - name: eq-author
      run:
        path: bash
        args:
        - -exc
        - |
          author_tag=$(cat eq-author/.git/HEAD | xargs echo -n)
          while [[ "$(curl -s https://staging-author.dev.eq.ons.digital/status.json)" != *"$author_tag"* ]]; do sleep 5; done
    on_failure:
      put: slack-alert
      params:
        channel: '#eq-author'
        attachments:
          - pretext: Staging Author Deploy Failed
            color: danger
            title: Concourse Build $BUILD_ID
            title_link: http://concourse.dev.eq.ons.digital/builds/$BUILD_ID
    timeout: 10m
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-terraform-build
      inputs:
      - name: eq-publisher
      run:
        path: bash
        args:
        - -exc
        - |
          publisher_tag=$(cat eq-publisher/.git/HEAD | xargs echo -n)
          while [[ "$(curl -s https://staging-publisher.dev.eq.ons.digital/status)" != *"$publisher_tag"* ]]; do sleep 5; done
    on_failure:
      put: slack-alert
      params:
        channel: '#eq-author'
        attachments:
          - pretext: Staging Publisher Deploy Failed
            color: danger
            title: Concourse Build $BUILD_ID
            title_link: http://concourse.dev.eq.ons.digital/builds/$BUILD_ID

- name: smoke-tests
  serial_groups: [staging-smoke-tests]
  plan:
  - aggregate:
    - get: eq-smoke-tests
      trigger: true
    - get: eq-survey-runner
      passed: [staging-deploy]
      trigger: true
    - get: eq-author
      passed: [staging-deploy]
      trigger: true
    - get: eq-author-api
      passed: [staging-deploy]
      trigger: true
    - get: eq-publisher
      passed: [staging-deploy]
      trigger: true
    - get: go-launch-a-survey
      passed: [staging-deploy]
      trigger: true
    - get: eq-schema-validator
      passed: [staging-deploy]
      trigger: true
    - get: eq-survey-register
      passed: [staging-deploy]
      trigger: true
    - get: eq-survey-runner-deploy
      passed: [staging-deploy]
      trigger: true
    - get: eq-author-deploy
      passed: [staging-deploy]
      trigger: true
  - task: Test
    params:
      BASE_URL: https://staging-author.dev.eq.ons.digital
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-author-build
      inputs:
      - name: eq-smoke-tests
      run:
        path: sh
        args:
        - -exc
        - |
          cd eq-smoke-tests
          yarn install
          yarn test_headless
    on_failure:
      put: slack-alert
      params:
        channel: '#eq-runner #eq-author'
        attachments:
          - pretext: Staging smoke-tests Failed
            color: danger
            title: Concourse Build $BUILD_ID
            title_link: http://concourse.dev.eq.ons.digital/builds/$BUILD_ID

- name: staging-destroy
  serial_groups: [staging-deploy, staging-smoke-tests, staging-destroy]
  plan:
  - get: eq-terraform
    passed: [staging-deploy]
  - task: Destroy Terraform
    params:
      AWS_ACCESS_KEY_ID: ((dev_aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((dev_aws_secret_key))
      ANSIBLE_HOST_KEY_CHECKING: False
      TF_VAR_env: 'staging'
      TF_VAR_aws_access_key: '((dev_aws_access_key))'
      TF_VAR_aws_secret_key: '((dev_aws_secret_key))'
      TF_VAR_aws_key_pair: staging
      TF_VAR_ons_access_ips: {{ons_access_ips}}
      TF_VAR_certificate_arn: {{certificate_arn}}
      TF_VAR_slack_webhook_path: {{slack_webhook_path}}
      TF_VAR_survey_runner_docker_registry: {{docker_registry}}
      TF_VAR_survey_launcher_registry: {{docker_registry}}
      TF_VAR_schema_validator_registry: {{docker_registry}}
      TF_VAR_author_registry: {{docker_registry}}
      TF_VAR_auto_deploy_updated_tags: false
      TF_VAR_ecs_cluster_min_size: 3
      TF_VAR_survey_runner_min_tasks: 3
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-terraform-build
      inputs:
      - name: eq-terraform
      run:
        path: bash
        args:
        - -exc
        - |
          echo "Destroy Staging"
          cd eq-terraform
          echo -e "" > staging.pem

          terraform init -backend-config="key="staging""
          echo "eu-west-1" | terraform destroy -force

- name: pre-prod-deploy
  max_in_flight: 1
  serial_groups: [pre-prod-deploy, pre-prod-smoke-tests]
  plan:
  - get: eq-survey-runner
    passed: [smoke-tests]
    trigger: true
  - get: eq-author
    passed: [smoke-tests]
    trigger: true
  - get: eq-author-api
    passed: [smoke-tests]
    trigger: true
  - get: eq-publisher
    passed: [smoke-tests]
    trigger: true
  - get: go-launch-a-survey
    passed: [smoke-tests]
    trigger: true
  - get: eq-schema-validator
    passed: [smoke-tests]
    trigger: true
  - get: eq-survey-register
    passed: [smoke-tests]
    trigger: true
  - get: eq-survey-runner-deploy
    passed: [smoke-tests]
    trigger: true
  - get: eq-author-deploy
    passed: [smoke-tests]
    trigger: true
  - get: eq-ecs-deploy
  - task: Deploy Survey Runner
    params:
      AWS_ACCESS_KEY_ID: ((preprod_aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((preprod_aws_secret_key))
      ANSIBLE_HOST_KEY_CHECKING: False
      TF_VAR_env: 'preprod-new'
      TF_VAR_aws_access_key: '((preprod_aws_access_key))'
      TF_VAR_aws_secret_key: '((preprod_aws_secret_key))'
      TF_VAR_ecs_cluster_name: 'preprod-eq'
      TF_VAR_docker_registry: {{docker_registry}}
      TF_VAR_aws_alb_listener_arn: {{preprod_aws_alb_listener_arn}}
      TF_VAR_database_host: {{preprod_database_host}}
      TF_VAR_database_port: {{preprod_database_port}}
      TF_VAR_database_name: {{preprod_database_name}}
      TF_VAR_rabbitmq_ip_prime: {{preprod_rabbitmq_ip_prime}}
      TF_VAR_rabbitmq_ip_failover: {{preprod_rabbitmq_ip_failover}}
      TF_VAR_google_analytics_code: {{preprod_google_analytics_code}}
      TF_VAR_s3_secrets_bucket: 'preprod-secrets-runner'
      TF_VAR_secrets_file_name: '../../../secrets/secrets.yml'
      TF_VAR_keys_file_name: '../../../secrets/keys.yml'
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-terraform-build
      inputs:
      - name: eq-survey-runner
      - name: eq-survey-runner-deploy
      run:
        path: bash
        args:
        - -exc
        - |
          cd eq-survey-runner-deploy

          survey_runner_tag=$(cat ../eq-survey-runner/.git/HEAD | xargs echo -n)

          terraform init -backend-config="bucket="concourse-preprod-terraform-state"" -backend-config="key="preprod-ecs-runner""
          terraform apply \
          -var survey_runner_tag=$survey_runner_tag
  - task: Deploy Survey Launcher
    params:
      AWS_ACCESS_KEY_ID: ((preprod_aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((preprod_aws_secret_key))
      ANSIBLE_HOST_KEY_CHECKING: False
      TF_VAR_env: 'preprod-new'
      TF_VAR_aws_access_key: '((preprod_aws_access_key))'
      TF_VAR_aws_secret_key: '((preprod_aws_secret_key))'
      TF_VAR_ecs_cluster_name: 'preprod-eq'
      TF_VAR_docker_registry: {{docker_registry}}
      TF_VAR_aws_alb_listener_arn: {{preprod_aws_alb_listener_arn}}
      TF_VAR_service_name: 'surveys-launch'
      TF_VAR_container_name: 'go-launch-a-survey'
      TF_VAR_container_port: 8000
      TF_VAR_listener_rule_priority: 101
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-terraform-build
      inputs:
      - name: go-launch-a-survey
      - name: eq-ecs-deploy
      run:
        path: bash
        args:
        - -exc
        - |
          cd eq-ecs-deploy

          survey_launcher_tag=$(cat ../go-launch-a-survey/.git/HEAD | xargs echo -n)

          terraform init -backend-config="bucket="concourse-preprod-terraform-state"" -backend-config="key="preprod-ecs-launcher""
          terraform apply \
          -var container_tag=$survey_launcher_tag \
          -var 'container_environment_variables="{\"name\": \"JWT_ENCRYPTION_KEY_PATH\",\"value\": \"/secrets/sdc-user-authentication-encryption-sr-public-key.pem\"},{\"name\": \"JWT_SIGNING_KEY_PATH\",\"value\": \"/secrets/sdc-user-authentication-signing-rrm-private-key.pem\"},{\"name\": \"SECRETS_S3_BUCKET\",\"value\": \"preprod-secrets\"},{\"name\": \"SURVEY_RUNNER_URL\",\"value\": \"https://preprod-new-surveys.eq.ons.digital\"}"' \
          -var 'task_iam_policy_json="{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Action\":[\"s3:ListObjects\",\"s3:ListBucket\",\"s3:GetObject\"],\"Resource\":\"arn:aws:s3:::preprod-secrets*\"}]}"'
  - task: Deploy Schema Validator
    params:
      AWS_ACCESS_KEY_ID: ((preprod_aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((preprod_aws_secret_key))
      ANSIBLE_HOST_KEY_CHECKING: False
      TF_VAR_env: 'preprod'
      TF_VAR_aws_access_key: '((preprod_aws_access_key))'
      TF_VAR_aws_secret_key: '((preprod_aws_secret_key))'
      TF_VAR_ecs_cluster_name: 'preprod-eq'
      TF_VAR_docker_registry: {{docker_registry}}
      TF_VAR_aws_alb_listener_arn: {{preprod_aws_alb_listener_arn}}
      TF_VAR_service_name: 'schema-validator'
      TF_VAR_container_name: 'eq-schema-validator'
      TF_VAR_container_port: 5000
      TF_VAR_listener_rule_priority: 500
      TF_VAR_healthcheck_path: '/status'
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-terraform-build
      inputs:
      - name: eq-schema-validator
      - name: eq-ecs-deploy
      run:
        path: bash
        args:
        - -exc
        - |
          cd eq-ecs-deploy

          schema_validator_tag=$(cat ../eq-schema-validator/.git/HEAD | xargs echo -n)

          terraform init -backend-config="bucket="concourse-preprod-terraform-state"" -backend-config="key="preprod-ecs-schema-validator""
          terraform apply \
          -var container_tag=$schema_validator_tag
  - task: Deploy Survey Register
    params:
      AWS_ACCESS_KEY_ID: ((preprod_aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((preprod_aws_secret_key))
      ANSIBLE_HOST_KEY_CHECKING: False
      TF_VAR_env: 'preprod'
      TF_VAR_aws_access_key: '((preprod_aws_access_key))'
      TF_VAR_aws_secret_key: '((preprod_aws_secret_key))'
      TF_VAR_ecs_cluster_name: 'preprod-eq'
      TF_VAR_docker_registry: {{docker_registry}}
      TF_VAR_aws_alb_listener_arn: {{preprod_aws_alb_listener_arn}}
      TF_VAR_service_name: 'survey-register'
      TF_VAR_container_name: 'eq-survey-register'
      TF_VAR_container_port: 8080
      TF_VAR_listener_rule_priority: 600
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-terraform-build
      inputs:
      - name: eq-survey-register
      - name: eq-ecs-deploy
      run:
        path: bash
        args:
        - -exc
        - |
          cd eq-ecs-deploy

          survey_register_tag=$(cat ../eq-survey-register/.git/HEAD | xargs echo -n)

          terraform init -backend-config="bucket="concourse-preprod-terraform-state"" -backend-config="key="preprod-ecs-survey-register""
          terraform apply \
          -var container_tag=$survey_register_tag
  - task: Deploy Author
    params:
      AWS_ACCESS_KEY_ID: ((preprod_aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((preprod_aws_secret_key))
      ANSIBLE_HOST_KEY_CHECKING: False
      TF_VAR_env: 'preprod'
      TF_VAR_aws_access_key: '((preprod_aws_access_key))'
      TF_VAR_aws_secret_key: '((preprod_aws_secret_key))'
      TF_VAR_ecs_cluster_name: 'preprod-eq'
      TF_VAR_docker_registry: {{docker_registry}}
      TF_VAR_aws_alb_listener_arn: {{preprod_aws_alb_listener_arn}}
      TF_VAR_survey_launcher_url: https://preprod-new-surveys-launch.eq.ons.digital
      TF_VAR_application_cidrs: [10.30.21.192/28,10.30.21.208/28,10.30.21.224/28]
      TF_VAR_firebase_project_id: ((preprod_author_firebase_project_id))
      TF_VAR_firebase_api_key: ((preprod_author_firebase_api_key))
      TF_VAR_firebase_messaging_sender_id: ((preprod_author_firebase_messaging_sender_id))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: onsdigital/eq-terraform-build
      inputs:
      - name: eq-author-deploy
      - name: eq-author
      - name: eq-author-api
      - name: eq-publisher
      run:
        path: bash
        args:
        - -exc
        - |
          cd eq-author-deploy

          author_tag=$(cat ../eq-author/.git/HEAD | xargs echo -n)
          author_api_tag=$(cat ../eq-author-api/.git/HEAD | xargs echo -n)
          publisher_tag=$(cat ../eq-publisher/.git/HEAD | xargs echo -n)

          terraform init -backend-config="bucket="concourse-preprod-terraform-state"" -backend-config="key="preprod-author"" -backend-config="region="eu-west-1""
          terraform apply \
          -var author_tag=$author_tag \
          -var author_api_tag=$author_api_tag \
          -var publisher_tag=$publisher_tag
  - put: slack-alert
    params:
      channel: '#eq-runner'
      attachments:
        - pretext: Pre-prod deployment successful
          color: good
          title: Concourse Build $BUILD_ID
          title_link: http://concourse.dev.eq.ons.digital/builds/$BUILD_ID
  - put: slack-alert
    params:
      channel: '#eq-author'
      attachments:
        - pretext: Pre-prod deployment successful
          color: good
          title: Concourse Build $BUILD_ID
          title_link: http://concourse.dev.eq.ons.digital/builds/$BUILD_ID
